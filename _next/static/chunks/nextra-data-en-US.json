{"/guides":{"title":"Guides","data":{"":"Guides for retrieving and working with the Data."}},"/":{"title":"Introduction","data":{"":"..."}},"/other_resources":{"title":"Other Resources","data":{"":"..."}},"/downloads/grant_rounds":{"title":"Grant Rounds","data":{"":"","historic-grants-data#Historic Grants Data":"Gitcoin has been organizing grant rounds every quarter. The last round (GR15) was\nrun in September 2022, before moving to the new grants protocol."}},"/guides/DeSocGraphData":{"title":"Desocgraphdata","data":{"":"","sites#Sites":"POAPs (xDAI only) via The Graph API\nSnapshot votes (all EVM chains) via Snapshot API\nNFT ownership (ETH Mainnet only) via Zora API\nLens profiles via Lens API\nProof of Humanity via PoH API","some-sample-queries-to-get-you-started#Some sample queries to get you started":"In each of the cases below, substitute the $WALLETS field with a list of wallet addresses (0x...)","lens-protocol#Lens Protocol":"query Profiles {\nprofiles(\nrequest: {\nownedBy: [$WALLETS],\nlimit: 50\n}\n) {\nitems {\nid\nname\nownedBy\nstats {\ntotalFollowers\ntotalFollowing\n}\n}\n}\n}","poap#POAP":"query POAPs {\naccounts(\nwhere: {\nid_in: [$WALLETS]\n}\n) {\nid\ntokensOwned\ntokens (first: 1000) {\nevent {\nid\n}\n}\n}\n}","snapshot#Snapshot":"query Votes {\nvotes (\nfirst: 10000\nskip: 0\nwhere: {\nvoter_in: [$WALLETS]\n}\n) {\nid\nvoter\ncreated\nproposal {\nid\n}\nchoice\nspace {\nid\n}\n}\n}","automating-queries#Automating queries":"Once you've configured your queries, here are some simple Python scripts for automating requests.\nNote: these scripts are fine for ad hoc analysis, not for building applications.You'll need to provide values for my_api_url, my_graphql_docstring and my_list_of_wallets.","method-1-using-requests#Method 1: Using requests":"str_list = \", \".join(f'\"{w}\"' for w in my_list_of_wallets)\nquery = my_graphql_docstring.replace(\"$WALLETS\", str_list)\nr = requests.post(my_api_url, json={\"query\": query})\njson_data = json.loads(r.text)","method-2-using-gql#Method 2: Using gql":"This approach is better for more complex tasking and uses a Python GraphQL client (gql3).Get the gql package here.\nfrom gql import gql, Client\nfrom gql.transport.requests import RequestsHTTPTransport\nsample_transport=RequestsHTTPTransport(\nurl=my_api_url,\nverify=True,\nretries=3,\n)\nclient = Client(\ntransport=sample_transport\n)\nstr_list = \", \".join(f'\"{w}\"' for w in my_list_of_wallets)\nquery = my_graphql_docstring.replace(\"$WALLETS\", str_list)\nq = gql(my_graphql_docstring)\nr = client.execute(q)\njson_data = json.loads(r.text)"}}}